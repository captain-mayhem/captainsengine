CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(CaptainsEngine C CXX)

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})

IF (NOT DEFINED OS)
  IF(CMAKE_HOST_UNIX)
    SET(OS "linux")
  ELSEIF(CMAKE_HOST_WIN32)
    SET(OS "windows")
  ELSE()
    MESSAGE(FATAL " OS must be set to the desired operating system")
  ENDIF()
ENDIF (NOT DEFINED OS)
SET(OS ${OS} CACHE STRING "the current operating system")

IF (NOT CPU)
  if (CMAKE_SIZEOF_VOID_P EQUAL 8)
    set (CPU "x64")
  else()
    set(CPU "x86")
  endif()
ENDIF (NOT CPU)
SET(CPU ${CPU} CACHE STRING "the current processor architecture")
MESSAGE(STATUS "CPU architecture is ${CPU}")

OPTION(PROJECT_HEROQUEST "compile heroquest projects" ON)
OPTION(PROJECT_ADVENTURE "compile adventure projects" ON)
OPTION(PROJECT_OSMRACER "compile osm racer projects" ON)
OPTION(PROJECT_COMPILER "compile compiler project" OFF)
OPTION(PROJECT_VGRENDER "compile vector graphics render projects" OFF)
SET(STORY_DESIGNER_VERSION "1.1.0" CACHE STRING "Story Designer Version" FORCE)

SET(VC_DIR "$ENV{VCINSTALLDIR}")


IF (CPU STREQUAL "x64" AND OS STREQUAL "linux")
SET(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} -fPIC)
SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -fPIC)
ENDIF()

SET(ADD_INC_PATH ${ADD_INC_PATH} CACHE STRING "additional include path")
SET(ADD_LIB_PATH ${ADD_LIB_PATH} CACHE STRING "additional link library path")
SET(ADD_LIB ${ADD_LIB} CACHE STRING "additional libraries to be linked against")
SET(ENGINE_LINK_LIBRARIES "")

INCLUDE_DIRECTORIES(
    ${CaptainsEngine_SOURCE_DIR}
	${CaptainsEngine_SOURCE_DIR}/Engine
    ${CaptainsEngine_SOURCE_DIR}/extern/jpeg
	${CaptainsEngine_SOURCE_DIR}/extern/lua
	${CaptainsEngine_SOURCE_DIR}/extern/ode
	${CaptainsEngine_SOURCE_DIR}/extern/glew/include
	${ADD_INC_PATH}
)

LINK_DIRECTORIES(
	${ADD_LIB_PATH}
)

IF (${OS} STREQUAL "wince")
  IF (NOT SDK_DIR)
    MESSAGE(ERROR "SDK_DIR must be set for Windows CE build")
  ENDIF (NOT SDK_DIR)
  SET(SDK_DIR ${SDK_DIR} CACHE STRING "the path to the Windows CE SDK")
  IF (NOT SDK_LIB_SUFFIX)
    MESSAGE(ERROR "SDK_LIB_SUFFIX must be set for Windows CE build")
  ENDIF (NOT SDK_LIB_SUFFIX)
  SET(SDK_LIB_SUFFIX ${SDK_LIB_SUFFIX} CACHE STRING "the library path suffix of the Windows CE SDK")
  IF (NOT SDK_INC_SUFFIX)
    MESSAGE(ERROR "SDK_INC_SUFFIX must be set for Windows CE build")
  ENDIF (NOT SDK_INC_SUFFIX)
  SET(SDK_INC_SUFFIX ${SDK_INC_SUFFIX} CACHE STRING "the include path suffix of the Windows CE SDK")
ENDIF (${OS} STREQUAL "wince")

IF (${OS} STREQUAL "windows")
  MESSAGE(STATUS "Compiling for Windows")
  SET(CMAKE_C_FLAGS_RELEASE "/MT /O2 /Ob2 /D NDEBUG")
  SET(CMAKE_CXX_FLAGS_RELEASE "/MT /O2 /Ob2 /D NDEBUG")
  ADD_DEFINITIONS(/D_CRT_SECURE_NO_DEPRECATE)
  SET(ENGINE_LINK_LIBRARIES
	wsock32
	winmm
  )
ENDIF (${OS} STREQUAL "windows")

IF (${OS} STREQUAL "linux")
  MESSAGE(STATUS "Compiling for Linux")
  ADD_DEFINITIONS(-DUNIX)
  ADD_DEFINITIONS(-DLINUX -D__STDC_LIMIT_MACROS)
  SET(ENGINE_LINK_LIBRARIES
    pthread
    rt
    ${ENGINE_LINK_LIBRARIES}
  )
ENDIF (${OS} STREQUAL "linux")

IF (${OS} STREQUAL "wince")
  MESSAGE(STATUS "Cross compiling for Windows CE")
  SET(CMAKE_CXX_COMPILER "${VC_DIR}/ce/bin/x86_arm/cl.exe")
  SET(CMAKE_C_COMPILER "${VC_DIR}/ce/bin/x86_arm/cl.exe")
  
  SET(CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG /MTd /Zi /Ob0 /Od")
  SET(CMAKE_C_FLAGS_DEBUG "/D_DEBUG /MTd /Zi /Ob0 /Od")
  SET(COMMON_FLAGS "/DBUFSIZ=512 /DUNICODE /D_UNICODE /DWIN32 /D_WINDOWS /W3 /Zm1000 /X /DARM /D_ARM_ /DUNDER_CE /D_WIN32_WCE=0x500 /I\"${VC_DIR}/ce/include\" /I\"${SDK_DIR}/${SDK_INC_SUFFIX}\"")
  SET(CMAKE_CXX_FLAGS "${COMMON_FLAGS} /EHsc /GR")
  SET(CMAKE_C_FLAGS "${COMMON_FLAGS}")
  #ADD_DEFINITIONS(-DHAVE_BOOLEAN)

  SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "libcpmtd.lib libcmtd.lib ${ADD_LIB}")
  SET(CMAKE_EXE_LINKER_FLAGS "coredll.lib corelibc.lib /MACHINE:ARM /SUBSYSTEM:WINDOWSCE /ARMPADCODE /NODEFAULTLIB /LIBPATH:\"${SDK_DIR}/${SDK_LIB_SUFFIX}\" /LIBPATH:\"${VC_DIR}/ce/lib/armv4i\"")
  SET(CMAKE_CREATE_CONSOLE_EXE "")
  SET(CMAKE_CREATE_WIN32_EXE "")
ENDIF (${OS} STREQUAL "wince")

IF (${OS} STREQUAL "qnx")
 MESSAGE(STATUS "Compiling for QNX")
  ADD_DEFINITIONS(-DUNIX)
  ADD_DEFINITIONS(-DQNX)
ENDIF (${OS} STREQUAL "qnx")

IF (${OS} STREQUAL "android")
	MESSAGE(STATUS "Compiling for Android")
	ADD_DEFINITIONS(-DUNIX)
	ADD_DEFINITIONS(-DQNX)
	ADD_DEFINITIONS(-DANDROID)
	set(CMAKE_SHARED_LINKER_FLAGS
	"-Wl,--no-undefined -shared -u android_main"
	)
	set(ENGINE_LINK_LIBRARIES
	  ${ENGINE_LINK_LIBRARIES}
	  android
	  log
	  )
ENDIF(${OS} STREQUAL "android")

OPTION(PHYSICS_DOUBLE_PRECISION "enable double precision physics calculations" ON)

IF(PHYSICS_DOUBLE_PRECISION)
	ADD_DEFINITIONS(-DdDOUBLE)
ELSE(PHYSiCS_DOUBLE_PRECISION)
	ADD_DEFINITIONS(-DdSINGLE)
ENDIF(PHYSICS_DOUBLE_PRECISION)

include(FindFBX)

set(ENGINE_LINK_LIBRARIES
	jpeg
	gif
	lua
	lualib
	ode
	png
	zlib
	${ENGINE_LINK_LIBRARIES}
)

ADD_SUBDIRECTORY(extern)
ADD_SUBDIRECTORY(Engine)
MESSAGE(STATUS "Engine link libraries are ${ENGINE_LINK_LIBRARIES}")
MESSAGE(STATUS "Engine compile flags are ${ENGINE_COMPILE_FLAGS}")
ADD_DEFINITIONS(${ENGINE_COMPILE_FLAGS})
IF(PROJECT_HEROQUEST)
	ADD_SUBDIRECTORY(editor)
	ADD_SUBDIRECTORY(heroquest)
ENDIF(PROJECT_HEROQUEST)
IF(PROJECT_ADVENTURE)
	ADD_SUBDIRECTORY(Adventure)
ENDIF(PROJECT_ADVENTURE)
IF(PROJECT_OSMRACER)
	ADD_SUBDIRECTORY(OSMRacer)
ENDIF(PROJECT_OSMRACER)
IF(PROJECT_COMPILER)
	ADD_SUBDIRECTORY(Compiler)
ENDIF(PROJECT_COMPILER)
IF(PROJECT_VGRENDER)
	ADD_SUBDIRECTORY(vgrender)
ENDIF(PROJECT_VGRENDER)
add_subdirectory(tools)

#packaging
set(CPACK_GENERATOR "NSIS")
set(CPACK_OUTPUT_FILE_PREFIX ${CMAKE_INSTALL_PREFIX})
set(CPACK_ARCHIVE_COMPONENT_INSTALL ON)
set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)
set(CPACK_PACKAGE_NAME "CaptainsGameEngine")
set(CPACK_PACKAGE_VENDOR "Marco Staginski")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "An open source, cross-platform game engine with focus on point&click adventures and 2D games")
set(CPACK_PACKAGE_VERSION ${STORY_DESIGNER_VERSION})

set(CPACK_COMPONENT_GROUP_EDITOR_DISPLAY_NAME "StoryDesigner")
set(CPACK_COMPONENT_GROUP_EDITOR_DESCRIPTION "The Point&Click Adventure and 2D Game Editor")
set(CPACK_COMPONENT_GROUP_EXAMPLES_DISPLAY_NAME "Examples")
set(CPACK_COMPONENT_GROUP_EXAMPLES_DESCRIPTION "Examples and Demos")

set(CPACK_COMPONENTS_ALL StoryDesignerRuntime StoryDesignerPlugins StoryDesignerEngine TestAdventure Airfight)
set(CPACK_COMPONENT_STORYDESIGNERRUNTIME_GROUP "Editor")
set(CPACK_COMPONENT_STORYDESIGNERRUNTIME_DISPLAY_NAME "StoryDesigner")
set(CPACK_COMPONENT_STORYDESIGNERRUNTIME_DESCRIPTION "The main component of the editor")
set(CPACK_COMPONENT_STORYDESIGNERRUNTIME_REQUIRED TRUE)
set(CPACK_COMPONENT_STORYDESIGNERPLUGINS_GROUP "Editor")
set(CPACK_COMPONENT_STORYDESIGNERPLUGINS_DISPLAY_NAME "StoryDesigner Plugins")
set(CPACK_COMPONENT_STORYDESIGNERPLUGINS_DESCRIPTION "Useful plugins for the editor like remote engine control, trace viewer, etc.")
set(CPACK_COMPONENT_STORYDESIGNERENGINE_GROUP "Editor")
set(CPACK_COMPONENT_STORYDESIGNERENGINE_DISPLAY_NAME "CGE Runtime")
set(CPACK_COMPONENT_STORYDESIGNERENGINE_DESCRIPTION "The game engine runtime environment for Windows")
set(CPACK_COMPONENT_TESTADVENTURE_GROUP "Examples")
set(CPACK_COMPONENT_TESTADVENTURE_DISPLAY_NAME "Demo-Adventure")
set(CPACK_COMPONENT_TESTADVENTURE_DESCRIPTION "A simple demo adventure that gives an example how editor and engine can be used")
set(CPACK_COMPONENT_AIRFIGHT_GROUP "Examples")
set(CPACK_COMPONENT_AIRFIGHT_DISPLAY_NAME "Airfight")
set(CPACK_COMPONENT_AIRFIGHT_DESCRIPTION "A simple 2D shooter with airplanes using Lua scripting")

set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")

set(CPACK_PACKAGE_INSTALL_DIRECTORY "CaptainsEngine")

set(CPACK_NSIS_EXECUTABLES_DIRECTORY "StoryDesigner")
set(CPACK_PACKAGE_EXECUTABLES StoryDesigner StoryDesigner)
set(CPACK_NSIS_MUI_FINISHPAGE_RUN "StoryDesigner")
include(CPack)