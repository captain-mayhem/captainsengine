/** \file
 *  This C header file was generated by $ANTLR version 3.1.2
 *
 *     -  From the grammar source file : pcdk.g
 *     -                            On : 2016-05-13 22:43:08
 *     -                for the parser : pcdkParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser pcdkParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef ppcdkParser, which is returned from a call to pcdkParserNew().
 *
 * The methods in ppcdkParser are  as follows:
 *
 *  - pcdkParser_prog_return      ppcdkParser->prog(ppcdkParser)
 *  - pcdkParser_stmt_return      ppcdkParser->stmt(ppcdkParser)
 *  - pcdkParser_nested_stmt_return      ppcdkParser->nested_stmt(ppcdkParser)
 *  - pcdkParser_func_call_return      ppcdkParser->func_call(ppcdkParser)
 *  - pcdkParser_event_handler_return      ppcdkParser->event_handler(ppcdkParser)
 *  - pcdkParser_level_stmt_return      ppcdkParser->level_stmt(ppcdkParser)
 *  - pcdkParser_row_stmt_return      ppcdkParser->row_stmt(ppcdkParser)
 *  - pcdkParser_timer_stmt_return      ppcdkParser->timer_stmt(ppcdkParser)
 *  - pcdkParser_conditional_return      ppcdkParser->conditional(ppcdkParser)
 *  - pcdkParser_braced_block_return      ppcdkParser->braced_block(ppcdkParser)
 *  - pcdkParser_block_return      ppcdkParser->block(ppcdkParser)
 *  - pcdkParser_arg_list_return      ppcdkParser->arg_list(ppcdkParser)
 *  - pcdkParser_arg_return      ppcdkParser->arg(ppcdkParser)
 *  - pcdkParser_arg_header_return      ppcdkParser->arg_header(ppcdkParser)
 *  - pcdkParser_complex_arg_return      ppcdkParser->complex_arg(ppcdkParser)
 *  - pcdkParser_long_string_return      ppcdkParser->long_string(ppcdkParser)
 *  - pcdkParser_stdarg_return      ppcdkParser->stdarg(ppcdkParser)
 *  - pcdkParser_rel_expr_return      ppcdkParser->rel_expr(ppcdkParser)
 *  - pcdkParser_expr_return      ppcdkParser->expr(ppcdkParser)
 *  - pcdkParser_term_return      ppcdkParser->term(ppcdkParser)
 *  - pcdkParser_factor_return      ppcdkParser->factor(ppcdkParser)
 *  - pcdkParser_variable_return      ppcdkParser->variable(ppcdkParser)
 *  - pcdkParser_ident_return      ppcdkParser->ident(ppcdkParser)
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_pcdkParser_H
#define _pcdkParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "AST.h"
#include <system/allocation.h>

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct pcdkParser_Ctx_struct pcdkParser, * ppcdkParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct pcdkParser_prog_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    NodeList* nodes;
}
    pcdkParser_prog_return;

typedef struct pcdkParser_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    StmtNode* stmt;
}
    pcdkParser_stmt_return;

typedef struct pcdkParser_nested_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    StmtNode* stmt;
}
    pcdkParser_nested_stmt_return;

typedef struct pcdkParser_func_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    FuncCallNode* func;
}
    pcdkParser_func_call_return;

typedef struct pcdkParser_event_handler_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    EventNode* evt;
}
    pcdkParser_event_handler_return;

typedef struct pcdkParser_level_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    LevelNode* lvl;
}
    pcdkParser_level_stmt_return;

typedef struct pcdkParser_row_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    RowNode* row;
}
    pcdkParser_row_stmt_return;

typedef struct pcdkParser_timer_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    TimerNode* timer;
}
    pcdkParser_timer_stmt_return;

typedef struct pcdkParser_conditional_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    CondNode* cond;
}
    pcdkParser_conditional_return;

typedef struct pcdkParser_braced_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    NodeList* nodes;
}
    pcdkParser_braced_block_return;

typedef struct pcdkParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    NodeList* nodes;
}
    pcdkParser_block_return;

typedef struct pcdkParser_arg_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    NodeList* nodes;
}
    pcdkParser_arg_list_return;

typedef struct pcdkParser_arg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    ASTNode* value;
}
    pcdkParser_arg_return;

typedef struct pcdkParser_arg_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    IntNode* number;
}
    pcdkParser_arg_header_return;

typedef struct pcdkParser_complex_arg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    ASTNode* value;
}
    pcdkParser_complex_arg_return;

typedef struct pcdkParser_long_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    IdentNode* ident;
}
    pcdkParser_long_string_return;

typedef struct pcdkParser_stdarg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    IdentNode* value;
}
    pcdkParser_stdarg_return;

typedef struct pcdkParser_rel_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    ASTNode* exp;
}
    pcdkParser_rel_expr_return;

typedef struct pcdkParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    ASTNode* exp;
}
    pcdkParser_expr_return;

typedef struct pcdkParser_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    ASTNode* trm;
}
    pcdkParser_term_return;

typedef struct pcdkParser_factor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    ASTNode* fac;
}
    pcdkParser_factor_return;

typedef struct pcdkParser_variable_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    ASTNode* var;
}
    pcdkParser_variable_return;

typedef struct pcdkParser_ident_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    IdentNode* id;
}
    pcdkParser_ident_return;



/** Context tracking structure for pcdkParser
 */
struct pcdkParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     pcdkParser_prog_return (*prog)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_stmt_return (*stmt)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_nested_stmt_return (*nested_stmt)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_func_call_return (*func_call)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_event_handler_return (*event_handler)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_level_stmt_return (*level_stmt)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_row_stmt_return (*row_stmt)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_timer_stmt_return (*timer_stmt)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_conditional_return (*conditional)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_braced_block_return (*braced_block)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_block_return (*block)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_arg_list_return (*arg_list)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_arg_return (*arg)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_arg_header_return (*arg_header)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_complex_arg_return (*complex_arg)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_long_string_return (*long_string)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_stdarg_return (*stdarg)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_rel_expr_return (*rel_expr)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_expr_return (*expr)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_term_return (*term)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_factor_return (*factor)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_variable_return (*variable)	(struct pcdkParser_Ctx_struct * ctx);
     pcdkParser_ident_return (*ident)	(struct pcdkParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred1_pcdk)	(struct pcdkParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred2_pcdk)	(struct pcdkParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred3_pcdk)	(struct pcdkParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct pcdkParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API ppcdkParser pcdkParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API ppcdkParser pcdkParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define UNDERSCORE      31
#define INFO_BEG      16
#define INT      9
#define COMMENT      32
#define MINUS      23
#define DIVIDE      26
#define IFNOT      13
#define SEMICOLON      6
#define REAL_INT      29
#define T__36      36
#define WS      35
#define EOF      -1
#define IF      12
#define ON      7
#define COMMA      27
#define TIMES      25
#define NEWLINE      34
#define TIMER      11
#define LPAREN      4
#define GREATER      20
#define LBRACKET      18
#define IDENT_FRAG      33
#define RBRACKET      21
#define IDIV      22
#define RPAREN      5
#define LEVEL      8
#define IDENT_PART      30
#define RBRACE      14
#define REAL      28
#define LESS      19
#define ROW      10
#define INFO_END      17
#define LBRACE      15
#define PLUS      24
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for pcdkParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
